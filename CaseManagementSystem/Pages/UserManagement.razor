@page "/usermanagement"

@using System.Net.Http.Json
@using CaseManagementSystem.Data.Auth;
@using CaseManagementSystem.Data.Users
@using System.Net.Mail;
@using System.Net;

@inject IDialogService Dialog
@inject UsersService UsersService
@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>User Management</PageTitle>

<div class="d-flex align-content-center justify-end mb-2">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => OpenManageUserDialog(null, null))">Create</MudButton>
</div>

<MudTable Items="@_users" Hover="true" Filter="new Func<UsersViewModel,bool>(FilterFuncCallBack)" @bind-SelectedItem="_selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">User Management</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh></MudTh>
        <MudTh>Username</MudTh>
        <MudTh>Firstname</MudTh>
        <MudTh>Lastname</MudTh>
        <MudTh>Role</MudTh>
        <MudTh>User Email</MudTh>
        <MudTh>Company</MudTh>
        <MudTh>Last Login</MudTh>
        <MudTh>Is Active</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Edit">
            <MudTooltip Text="Edit User" Color="Color.Primary" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="Edit" OnClick="@((e) => OpenManageUserDialog(@context.Id, null))"></MudIconButton>
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="Change Password">
            <MudTooltip Text="Change Password" Color="Color.Primary" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.Filled.Password" Color="Color.Primary" aria-label="Password" OnClick="@(() => OpenChangePasswordDialog(@context.Id))"></MudIconButton>
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
        <MudTd DataLabel="Firstname">@context.FirstName</MudTd>
        <MudTd DataLabel="Lastname">@context.LastName</MudTd>
        <MudTd DataLabel="Role">@context.GetRoleTypeName()</MudTd>
        <MudTd DataLabel="User Email">@context.EmailAddress</MudTd>
        <MudTd DataLabel="Company">@context.CompanyName</MudTd>
        <MudTd DataLabel="Last Login">@context.LastLogin</MudTd>
        <MudTd DataLabel="Is Active">
            <MudSwitch T="bool" Checked="@context.IsActive" CheckedChanged="@(e => ActiveUser(context, e))" Color="Color.Primary"></MudSwitch>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private UsersViewModel _selectedItem = null;
    private IEnumerable<UsersViewModel> _users = new List<UsersViewModel>();
    private string _searchString = "";
    private UsersViewModel _currentLoginUser = new UsersViewModel();

    protected override async Task OnInitializedAsync()
    {
        if (!CustomAuthenticationStateProvider.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/");
        }

        if (CustomAuthenticationStateProvider.RoleType() == "Agent")
        {
            NavigationManager.NavigateTo("/index");
        }

        _currentLoginUser = await UsersService.CheckLogin(CustomAuthenticationStateProvider.UserName());
        await GetUsers();
    }

    private async Task GetUsers()
    {
        if (CustomAuthenticationStateProvider.RoleType() != "Admin")
        {
            _users = await UsersService.GetAllUsersByClientAsync(_currentLoginUser.Id);
        }
        else
        {
            _users = await UsersService.GetAllUsersAsync();
        }
    }

    private bool FilterFuncCallBack(UsersViewModel user) => FilterFunc(user, _searchString);

    private bool FilterFunc(UsersViewModel user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ((user?.UserName?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((user?.FirstName?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((user?.LastName?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((user?.GetRoleTypeName()?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((user?.EmailAddress?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((user?.CompanyName?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;

        return false;
    }

    private async Task OpenManageUserDialog(Guid? Id, byte? RoleType)
    {
        var parameters = new DialogParameters<ManageUser>();
        parameters.Add(x => x.Id, Id);
        parameters.Add(x => x.RoleTypeValue, RoleType);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

        DialogResult result = await Dialog.Show<ManageUser>("User", parameters, options).Result;

        if (!result.Canceled)
        {
            await GetUsers();
        }
    }

    private async Task OpenChangePasswordDialog(Guid Id)
    {
        var parameters = new DialogParameters<ManageUser>();
        parameters.Add(x => x.Id, Id);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, CloseButton = true };

        DialogResult result = await Dialog.Show<ChangePassword>("Change Password", parameters, options).Result;

        if (!result.Canceled)
        {
            await GetUsers();
        }
    }

    private async Task ActiveUser(UsersViewModel record, bool isChecked)
    {
        var parameters = new DialogParameters<DeleteConfirmation>();
        parameters.Add(x => x.ContentText, $"Do you really want to {(isChecked ? "active" : "in-active")} this record?");
        parameters.Add(x => x.ButtonText, "Yes");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogResult result = await Dialog.Show<DeleteConfirmation>("Confirmation", parameters, options).Result;

        if (!result.Canceled)
        {
            await UsersService.ActiveUsersAsync(record.Id, isChecked, _currentLoginUser.Id);
            await GetUsers();

            Snackbar.Add($"Successfully {(isChecked ? "active" : "in-active")} user.", Severity.Success);
        }
    }

    private void check()
    {
        string senderEmail = "prajaktaujdikar75@gmail.com";
        string senderPassword = "Praju@5254";

        // Recipient's email address
        string recipientEmail = "krunalchaudharidev@gmail.com";

        // Create a new MailMessage object
        MailMessage message = new MailMessage();
        message.From = new MailAddress(senderEmail);
        message.To.Add(recipientEmail);
        message.Subject = "Hello, World!";
        message.Body = "This is a test email sent from C#.";

        // Create a new SmtpClient to send the email
        SmtpClient smtpClient = new SmtpClient("smtp.gmail.com");
        smtpClient.Port = 587; // Port for Gmail's SMTP server
        smtpClient.UseDefaultCredentials = false;
        smtpClient.Credentials = new NetworkCredential(senderEmail, senderPassword);
        smtpClient.EnableSsl = true;

        try
        {
            // Send the email
            smtpClient.Send(message);
            Console.WriteLine("Email sent successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error sending email: " + ex.Message);
        }
        finally
        {
            // Dispose of the SmtpClient and MailMessage objects
            smtpClient.Dispose();
            message.Dispose();
        }
    }
}