@page "/password"

@using CaseManagementSystem.Data.Auth;
@using CaseManagementSystem.Data.Users;
@using System.Text.RegularExpressions;

@inject UsersService UserService
@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider

<MudCard>
    <MudForm @ref="_form">
        <MudCardContent>
            <MudText Typo="Typo.h5" Class="mb-5">Change Password</MudText>
            <MudTextField T="string" InputType="InputType.Password" Class="mb-5" Label="Current Password" Variant="Variant.Outlined" Validation="PasswordCheck" Required="true" RequiredError="Password is Required!"></MudTextField>

            <MudTextField T="string" InputType="InputType.Password" Class="mb-5" Label="New Password" Variant="Variant.Outlined" Required="true" RequiredError="Password is Required!" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" @ref="_pwField"></MudTextField>

            <MudTextField T="string" InputType="InputType.Password" Label="Confirm Password" Variant="Variant.Outlined" Validation="@(new Func<string, string>(PasswordMatch))"></MudTextField>
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SavePassword">Apply Changes</MudButton>
    </MudCardActions>
</MudCard>

@code {
    bool _success;
    MudForm _form;
    private string _newPassword = "";
    private MudTextField<string> _pwField;
    private UsersViewModel _currentLoginUser = new UsersViewModel();

    protected override async Task OnInitializedAsync()
    {
        _currentLoginUser = await UserService.CheckLogin(CustomAuthenticationStateProvider.UserName());
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is Requried!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8.";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter.";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter.";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit.";
    }

    private string PasswordMatch(string arg)
    {
        if (_pwField.Value != arg)
            return "Passwords don,t match";
        return null;
    }

    private async Task<IEnumerable<string>> PasswordCheck(string value)
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(value))
            errors.Add("Password is Requried");

        UsersViewModel userview = await UserService.GetUsersByIdAsync(_currentLoginUser.Id);
        if (userview.Password != value)
            errors.Add("Incorrect password.");

        return errors;
    }

    public async Task SavePassword()
    {
        try
        {
            await UserService.UpdateUsersPasswordAsync(_currentLoginUser.Id, _newPassword, _currentLoginUser.Id);
            Snackbar.Add("Successfully saved password.", Severity.Success);
        }
        catch (Exception)
        {
            Snackbar.Add("Error! Please try again.", Severity.Error);
        }
    }
}
