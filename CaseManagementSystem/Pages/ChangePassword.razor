@using CaseManagementSystem.Data.Auth;
@using CaseManagementSystem.Data.Users;
@using System.Text.RegularExpressions;

@inject UsersService UserService
@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider

<MudDivider />

<MudForm @ref="_form">
    <MudDialog>
        <DialogContent>
            @if (_loading)
            {
                <MudProgressLinear Indeterminate="true" Color="@Color.Info" Style="position:absolute;top:0;right:0" />
            }
            <MudPaper Elevation="0">
                <MudGrid Spacing="2">
                    <MudItem xs="12">
                        <MudTextField T="string" InputType="InputType.Password" Label="Current Password" Variant="Variant.Outlined" Validation="PasswordCheck" Required="true" RequiredError="Password is required!"></MudTextField>
                    </MudItem>   
                    <MudItem xs="12">
                        <MudTextField T="string" InputType="InputType.Password" @bind-Value="_newPassword" Label="New Password" Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true" RequiredError="Password is required!" @ref="_pwField"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" InputType="InputType.Password" Label="Confirm Password" Variant="Variant.Outlined" Validation="@(new Func<string, string>(PasswordMatch))"></MudTextField>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SavePassword">Apply Changes</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid Id { get; set; }

    private MudForm _form;    
    private MudTextField<string> _pwField;
    private bool _loading = true;
    private string _newPassword = "";
    private UsersViewModel _currentLoginUser = new UsersViewModel();

    protected override async Task OnInitializedAsync()
    {
        _currentLoginUser = await UserService.CheckLogin(CustomAuthenticationStateProvider.UserName());
        _loading = false;
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8.";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter.";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter.";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit.";
    }

    private string PasswordMatch(string arg)
    {
        if (_pwField.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task<IEnumerable<string>> PasswordCheck(string value)
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(value))
            errors.Add("Password is required!");

        UsersViewModel userView = await UserService.GetUsersByIdAsync(Id);
        if (userView.Password != value)
            errors.Add("Incorrect password.");

        return errors;
    }

    private async Task SavePassword()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            try
            {
                await UserService.UpdateUsersPasswordAsync(Id, _newPassword, _currentLoginUser.Id);

                Snackbar.Add("Successfully saved password.", Severity.Success);
            }
            catch (Exception)
            {
                Snackbar.Add("Error! Please try again.", Severity.Error);
            }

            MudDialog.Close(DialogResult.Ok(Id));
        }
    }

    void Cancel() => MudDialog.Cancel();
}