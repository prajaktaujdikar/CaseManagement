@page "/agencytype"

@using System.Net.Http.Json
@using CaseManagementSystem.Data.AgencyTypes
@using System.Net;
@using CaseManagementSystem.Data.Auth;

@inject IDialogService Dialog
@inject AgencyTypeService AgencyTypeService
@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager NavigationManager


<PageTitle>Agency Type</PageTitle>

<div class="d-flex align-content-center justify-end mb-2">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => OpenManageAgencyTypeDialog(null))">Create</MudButton>
</div>

<MudTable Items="@_agencyTypes" Hover="true" Filter="new Func<AgencyTypeViewModel,bool>(FilterFuncCallBack)" @bind-SelectedItem="_selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Agency Type</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTd></MudTd>
        <MudTd></MudTd>
        <MudTd>Name</MudTd>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Edit">
            <MudTooltip Text="Edit Agency Type" Color="Color.Primary" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="Edit" OnClick="@((e) => OpenManageAgencyTypeDialog(@context.Id))"></MudIconButton>
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="Remove">
            <MudTooltip Text="Remove Agency Type" Color="Color.Primary" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" aria-label="Remove" OnClick="@((e) => RemoveAgencyType(@context.Id))"></MudIconButton>
            </MudTooltip>
        </MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private AgencyTypeViewModel _selectedItem = null;
    private IEnumerable<AgencyTypeViewModel> _agencyTypes = new List<AgencyTypeViewModel>();
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        if (!CustomAuthenticationStateProvider.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/");
        }

        if (CustomAuthenticationStateProvider.RoleType() == "Client" || CustomAuthenticationStateProvider.RoleType() == "Agent")
        {
            NavigationManager.NavigateTo("/index");
        }

        await GetAgencyTypes();
    }

    private async Task GetAgencyTypes()
    {
        _agencyTypes = await AgencyTypeService.GetAllAgencyTypesAsync();
    }

    private bool FilterFuncCallBack(AgencyTypeViewModel agencyType) => FilterFunc(agencyType, _searchString);

    private bool FilterFunc(AgencyTypeViewModel agencyType, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ((agencyType?.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;

        return false;
    }

    private async Task OpenManageAgencyTypeDialog(Guid? Id)
    {
        var parameters = new DialogParameters<ManageAgencyType>();
        parameters.Add(x => x.Id, Id);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, CloseButton = true };

        DialogResult result = await Dialog.Show<ManageAgencyType>("Agency Type", parameters, options).Result;

        if (!result.Canceled)
        {
            await GetAgencyTypes();
        }
    }

    private async Task RemoveAgencyType(Guid id)
    {
        var parameters = new DialogParameters<DeleteConfirmation>();
        parameters.Add(x => x.ContentText, $"Do you really want to remove this agency type record?");
        parameters.Add(x => x.ButtonText, "Yes");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogResult result = await Dialog.Show<DeleteConfirmation>("Confirmation", parameters, options).Result;

        if (!result.Canceled)
        {
            await AgencyTypeService.DeleteAgencyTypesAsync(id);
            await GetAgencyTypes();

            Snackbar.Add($"Successfully removed agency type.", Severity.Success);
        }
    }
}