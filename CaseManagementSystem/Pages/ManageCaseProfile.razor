@using System.Net.Http.Json
@using System.Net;
@using CaseManagementSystem.Data.AgencyTypeCaseProfile;
@using CaseManagementSystem.Data.Auth;
@using CaseManagementSystem.Data.CaseProfiles
@using CaseManagementSystem.Data.CaseTypes
@using CaseManagementSystem.Data.AgencyTypes
@using CaseManagementSystem.Data.TimeLimits;
@using CaseManagementSystem.Data.Users;

@inject CaseProfileService CaseProfileService
@inject CaseTypeService CaseTypeService
@inject AgencyTypeService AgencyTypeService
@inject TimeLimitService TimeLimitService
@inject UsersService UsersService
@inject IDialogService Dialog
@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject AgencyTypeCaseProfileService AgencyTypeCaseProfileService

<MudForm @ref="_form">
    <MudDialog>
        <DialogContent>
            @if (_loading)
            {
                <MudProgressLinear Indeterminate="true" Color="@Color.Info" Style="position:absolute;top:0;right:0" />
            }
            <MudPaper Elevation="0">
                <MudGrid Spacing="2">
                    <MudItem xs="12">
                        <MudAutocomplete T="CaseTypeViewModel" Label="Case Type" @bind-Value="_selectedCaseType" SearchFunc="@SearchCaseTypes" ToStringFunc="@(e=> e==null?null : $"{e.Name}")" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_CaseProfileView.CaseDescription" Label="Case Description" Variant="Variant.Outlined" Clearable="true" Lines="3" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudAutocomplete T="TimeLimitViewModel" Label="Time Limit" @bind-Value="_selectedTimeLimit" SearchFunc="@SearchTimeLimits" ToStringFunc="@(e=> e==null?null : $"{e.Name}")" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect T="Guid" Label="Agency Types" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="options" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @if (_agencyTypeView != null)
                            {
                                @foreach (AgencyTypeViewModel item in _agencyTypeView)
                                {
                                    <MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" OnClick="Cancel">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveCaseProfile">Apply Changes</MudButton>
        </DialogActions>
    </MudDialog>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid? Id { get; set; }

    private CaseProfileViewModel _CaseProfileView = new CaseProfileViewModel();
    private MudForm _form;
    private bool _loading = true;
    private CaseTypeViewModel _selectedCaseType = null;
    private IEnumerable<AgencyTypeViewModel> _agencyTypeView = null;
    private TimeLimitViewModel _selectedTimeLimit = null;
    private UsersViewModel _currentLoginUser = new UsersViewModel();
    private Guid value { get; set; }
    private IEnumerable<Guid> options { get; set; } = new HashSet<Guid>();
    private bool multiselectionTextChoice;

    protected override async Task OnInitializedAsync()
    {
        if (Id != null && Id != Guid.Empty)
        {
            await GetCaseProfileById();
            IEnumerable<AgencyTypeCaseProfileViewModel> agencyTypeCaseProfileView = await AgencyTypeCaseProfileService.GetAgencyTypeCaseProfileByProfileIdAsync((Guid)Id);
            if ((agencyTypeCaseProfileView?.Count() ?? 0) > 0)
            {
                options = agencyTypeCaseProfileView.Select(a => a.AgencyTypesId);
            }
            if (_CaseProfileView.CaseTypeId != null && _CaseProfileView.CaseTypeId != Guid.Empty)
            {
                _selectedCaseType = await CaseTypeService.GetCaseTypesByIdAsync((Guid)_CaseProfileView.CaseTypeId);
            }
            if (_CaseProfileView.TimeLimitId != null && _CaseProfileView.TimeLimitId != Guid.Empty)
            {
                _selectedTimeLimit = await TimeLimitService.GetTimeLimitsByIdAsync((Guid)_CaseProfileView.TimeLimitId);
            }
        }
        _agencyTypeView = await AgencyTypeService.GetAllAgencyTypesAsync();
        _currentLoginUser = await UsersService.CheckLogin(CustomAuthenticationStateProvider.UserName());

        _loading = false;
    }

    private async Task GetCaseProfileById()
    {
        _CaseProfileView = await CaseProfileService.GetCaseProfilesByIdAsync((Guid)Id);
    }

    private async Task<IEnumerable<CaseTypeViewModel>> SearchCaseTypes(string value)
    {
        IEnumerable<CaseTypeViewModel> caseTypes = await CaseTypeService.GetAllCaseTypesAsync();
        if (!string.IsNullOrWhiteSpace(value))
        {
            caseTypes = caseTypes.Where(c => c.Name != null && c.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

        return caseTypes;
    }

    private async Task<IEnumerable<TimeLimitViewModel>> SearchTimeLimits(string value)
    {
        IEnumerable<TimeLimitViewModel> timeLimits = await TimeLimitService.GetAllTimeLimitsAsync();
        if (!string.IsNullOrWhiteSpace(value))
        {
            timeLimits = timeLimits.Where(c => c.Name != null && c.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }

        return timeLimits;
    }

    private async Task SaveCaseProfile()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            try
            {
                _CaseProfileView.Updated = DateTime.UtcNow;
                _CaseProfileView.UpdatedBy = _currentLoginUser.Id;
                _CaseProfileView.CaseTypeId = _selectedCaseType?.Id;
                _CaseProfileView.TimeLimitId = _selectedTimeLimit?.Id;

                if (Id != null && Id != Guid.Empty)
                {
                    await CaseProfileService.UpdateCaseProfilesAsync(_CaseProfileView);
                }
                else
                {
                    _CaseProfileView.Created = DateTime.UtcNow;
                    _CaseProfileView.CreatedBy = _currentLoginUser.Id;
                    await CaseProfileService.InsertCaseProfilesAsync(_CaseProfileView);

                    CaseProfileViewModel addedData = await CaseProfileService.GetLastCaseProfileAsync();
                    Id = addedData.Id;
                }

                await AgencyTypeCaseProfileService.DeleteAgencyTypeCaseProfileAsync((Guid)Id);

                foreach (Guid item in options)
                {
                    await AgencyTypeCaseProfileService.InsertAgencyTypeCaseProfileAsync(new AgencyTypeCaseProfileViewModel
                        {
                            AgencyTypesId = item,
                            CaseProfilesId = (Guid)Id
                        });
                }
                Snackbar.Add("Successfully saved Case Profile information.", Severity.Success);
            }
            catch (Exception)
            {
                Snackbar.Add("Error! Please try again.", Severity.Error);
            }
            MudDialog.Close(DialogResult.Ok(Id));
        }
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (multiselectionTextChoice)
        {
            return $"Selected agency type{(selectedValues.Count > 1 ? "s" : "")}: {string.Join(", ", selectedValues.Select(x => x))}";
        }
        else
        {
            return $"{selectedValues.Count} agency type{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
        }
    }

    void Cancel() => MudDialog.Cancel();
}
