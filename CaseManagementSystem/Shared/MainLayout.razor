@using CaseManagementSystem.Data.Auth;
@inherits LayoutComponentBase

@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager NavigationManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Case Management System</PageTitle>

<MudLayout>
    @if (IsLoginPage())
    {
        <MudContainer Class="mt-6">
            @Body
        </MudContainer>
    }
    else
    {
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
            <MudSpacer />
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit">
                <MudMenuItem OnClick="UserProfile">Profile</MudMenuItem>
                <MudMenuItem OnClick="ChangePassword">Change Password</MudMenuItem>
                <MudMenuItem OnClick="LogoutUser">Logout</MudMenuItem>
            </MudMenu>
        </MudAppBar>
        <MudDrawer @bind-Open="@open" Elevation="1">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6">CMS</MudText>
            </MudDrawerHeader>

            <NavMenu />

        </MudDrawer>
        <MudMainContent Class="pt-16 px-16">
            <MudContainer Class="mt-6">
                @Body
            </MudContainer>
        </MudMainContent>
    }
</MudLayout>

@code {
    bool open = true;

    private void ToggleDrawer()
    {
        open = !open;
    }

    private bool IsLoginPage()
    {
        string uri = NavigationManager.Uri;

        // Check if the URI contains "/login" or is equal to the base URI.
        if (uri.Contains("/login") || uri == NavigationManager.BaseUri)
        {
            return true;
        }

        // Split the URI by '/' character.
        string[] parts = uri.Split('/');

        // Check if there are at least 4 parts and none of the parts are empty or whitespace.
        if (parts.Length >= 4 && parts.Skip(3).Any(part => !string.IsNullOrWhiteSpace(part)))
        {
            return false;
        }

        return true;
    }

    private void UserProfile()
    {
        NavigationManager.NavigateTo("/profile");
    }

    private void ChangePassword()
    {
        NavigationManager.NavigateTo("/password");
    }

    private async Task LogoutUser()
    {
        await CustomAuthenticationStateProvider.LogoutUserAsync();
        NavigationManager.NavigateTo("/");
    }
}